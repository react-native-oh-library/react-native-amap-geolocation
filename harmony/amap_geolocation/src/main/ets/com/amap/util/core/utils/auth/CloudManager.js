import h30 from '@ohos.deviceInfo'; import HashMap from '@ohos.util.HashMap'; import cryptoFramework from '@ohos.security.cryptoFramework'; import { PreferencesUtil } from '../PreferencesUtil'; import { Constants } from '../Constants'; import { LogUtil } from '../LogUtil'; import { q22 } from '../AMapAES'; import { DeviceInfo } from '../../DeviceInfo'; import { r10 } from '../RequestUtil'; const i30 = "11K"; class j30 { constructor() { this.u27 = new HashMap(); this.v27 = new HashMap(); this.w27 = new HashMap(); this.x27 = new HashMap(); } setCloudListener(k32, listener) { if (k32 === undefined || k32.length === 0 || listener === undefined) { return; } this.w27.set(k32, listener); } y27(j32) { if (j32 === undefined || j32.length === 0) { return; } this.w27.remove(j32); } z19(i32) { if (i32 === undefined || i32.length === 0) { return undefined; } return this.w27.get(i32); } v26(a32, b32, c32) { if (b32 === undefined) { return; } let d32 = Object.getOwnPropertyNames(b32); if (d32.length === 0) { return; } if (this.z27 === undefined) { this.z27 = new HashMap(); } else { this.z27.clear(); } d32.forEach((key) => { var f32; if (j30.a28.includes(key)) { let h32 = b32[key]; if (key && h32) { (f32 = this.z27) === null || f32 === void 0 ? void 0 : f32.set(key, h32); } } else if (c32.includes(key)) { if (a32.result === undefined) { a32.result = new HashMap(); } let g32 = b32[key]; if (key && g32) { a32.result.set(key, g32); } } }); } t26(t31) { if (t31.length < j30.b28) { new Promise((y31, z31) => { y31("服务返回云控数据异常"); }); } const key = t31.subarray(0, j30.b28); const data = t31.subarray(j30.b28, t31.length); let u31 = new Uint8Array(j30.h22); let v31 = q22(key, u31, data, cryptoFramework.CryptoMode.DECRYPT_MODE); return v31.then(data => { return data; }); } n26(p31, q31) { if (p31 === undefined) { return; } if (j30.a28 !== undefined && j30.a28.length > 0 && !p31.includes(j30.a28[0])) { j30.a28.forEach((s31) => { p31.push(s31); }); } if (p31.length > 0 && q31 !== undefined) { this.u27.set(q31, p31); } } c28(f31) { var g31, h31, i31, j31; let k31 = DeviceInfo.platform(); const product = (g31 = f31.r21()) !== null && g31 !== void 0 ? g31 : ''; const l31 = (h31 = f31.getSDKVersion()) !== null && h31 !== void 0 ? h31 : ''; const m31 = Constants.d28; let manufacture = (i31 = h30.manufacture) !== null && i31 !== void 0 ? i31 : ''; let n31 = (j31 = h30.abiList) !== null && j31 !== void 0 ? j31 : ''; let o31 = 'platform=' + k31 + '&product=' + product + '&sdkversion=' + l31 + '&founversion=' + m31 + '&manufacture=' + manufacture + '&abitype=' + n31; this.v27.set(product, o31); } q11(request) { const d31 = r10.k11(request); if (d31 === undefined) { return undefined; } if (d31.length === 0) { return undefined; } const e31 = this.v27.get(d31); return e31; } s26(x30, context) { const y30 = x30.get('sdkName'); if (y30 === undefined || y30.length === 0) { LogUtil.e(Constants.z9, 'Auth', 'saveCloudInfo sdkName 不存在'); return; } const z30 = x30.get(Constants.n11); const a31 = x30.get(Constants.o11); const b31 = this.u27.get(y30); if (z30 === undefined || a31 === undefined) { return; } PreferencesUtil.putSync(context, y30 + Constants.n11, z30); PreferencesUtil.putSync(context, y30 + Constants.o11, a31); if (b31 !== undefined && b31.length > 0) { const c31 = b31.join(';'); PreferencesUtil.putSync(context, y30 + Constants.p11, c31); this.x27.set(y30 + Constants.p11, c31); } PreferencesUtil.flush(context); this.x27.set(y30 + Constants.n11, z30); this.x27.set(y30 + Constants.o11, a31); } l11(o30) { if (o30 === undefined) { return undefined; } if (o30.length === 0) { return undefined; } const p30 = o30 + Constants.n11; const q30 = o30 + Constants.o11; const r30 = o30 + Constants.p11; let s30 = this.x27.get(p30); let t30 = this.x27.get(q30); let u30 = this.x27.get(r30); if (s30 !== undefined && s30.length !== 0 && t30 !== undefined && t30.length !== 0 && u30 !== undefined && u30.length !== 0) { let w30 = new HashMap(); w30.set(Constants.n11, s30); w30.set(Constants.o11, t30); w30.set(Constants.p11, u30); return w30; } s30 = PreferencesUtil.getSync(getContext(this), p30, ""); t30 = PreferencesUtil.getSync(getContext(this), q30, ""); u30 = PreferencesUtil.getSync(getContext(this), r30, ""); if (s30 === undefined || s30.length === 0 || t30 === undefined || t30.length === 0 || u30 === undefined || u30.length === 0) { return undefined; } this.x27.set(p30, s30); this.x27.set(q30, q30); this.x27.set(r30, u30); let v30 = new HashMap(); v30.set(Constants.n11, s30); v30.set(Constants.o11, t30); v30.set(Constants.p11, u30); return v30; } x19(k30) { if (k30 === undefined || k30.length === 0) { return undefined; } const l30 = cloudManager.l11(k30); if (l30 !== undefined && l30.length > 0) { const m30 = l30.get(Constants.p11); if (m30) { const n30 = m30.split(';'); return n30; } } return undefined; } } j30.b28 = 16; j30.h22 = [17, 32, 107, -114, -18, -61, 39, 59, -6, 113, 122, 88, 11, 19, 90, -27]; j30.a28 = [i30]; export const cloudManager = new j30(); 