import HashMap from '@ohos.util.HashMap'; import { NetManager } from '../../net/NetManager'; import util from '@ohos.util'; import { LogUtil } from '../LogUtil'; import { Constants } from '../Constants'; import { Utils } from '../Utils'; import d27 from '../TimeUtil'; import { MD5 } from '../MD5'; import { e27 } from '../SysUtils'; import { cloudManager } from './CloudManager'; import { g20 } from '../SDKInfoUtil'; import { r10 } from '../RequestUtil'; import { AppInfo } from '../AppInfo'; const f27 = "2.0"; const g27 = "2.1"; const h27 = "3.0"; const i27 = "AMapAuthUpdateNotification"; class j27 { constructor() { this.status = false; this.info = ''; this.infocode = '-1'; this.response = new HashMap(); } } class AuthManagerImpl { constructor() { this.m10 = ''; this.d26 = true; this.identifier = ''; this.e26 = new HashMap(); this.e26.set(Constants.f26, '请在高德开放平台官网中搜索【INVALID_USER_KEY】相关内容进行解决。'); this.e26.set(Constants.g26, '请在高德开放平台官网中搜索【INVALID_USER_SCODE】相关内容进行解决。'); this.e26.set(Constants.h26, '请在高德开放平台官网中搜索【请求内容过长导致业务调用失败】相关内容进行解决。'); } setApiKey(g30) { AppInfo.setApiKey(g30); this.m10 = g30; } getApiKey() { return AppInfo.getApiKey(); } i26(f30) { this.d26 = f30; } registerWithComponent(e30, context) { g20.j26(e30); } registerAuthWithComponent(t29, u29, context) { let v29 = this.k26(); return v29.then(() => { if (this.m10.length === 0) { const info = "apiKey为空，请正确设置apiKey。请在 EntryAbility.ets 文件的 onCreate 方法中配置高德 Key。"; this.l26(info, undefined, undefined, t29, context); return this.m26(); } let y29 = this.requestAuthWithComponent(t29, u29, undefined, context); return y29.then(a30 => { return new Promise((c30, d30) => { c30(a30); }); }); }).catch(() => { return this.m26(); }); } m26() { let p29 = { status: false, info: '鉴权请求异常', infocode: '-1' }; return new Promise((r29, s29) => { r29(p29); }); } requestAuthWithComponent(b29, c29, params, context, d29 = false) { if (!d29) { cloudManager.n26(c29, b29.r21()); g20.j26(b29); } let e29 = this.o26(b29, c29); let header = this.p26(b29, h27); const f29 = (c29 === undefined || c29.length === 0) ? false : true; let request = { url: "https://dualstack-arestapi.amap.com/v3/iasdkauth", header: header, params: params, isREST: true, isPandoraBody: f29, encryptedData: e29, o12: '3.0' }; let g29 = NetManager.getInstance(); let h29 = g29.makeRequestPost(request, context); return h29.then((response) => { let l29 = this.q19(response, c29); return l29.then(n29 => { const o29 = this.q26(response, n29, request, context); if (n29.status === false) { this.l26(n29.info, o29, response.result, b29, context); } return n29; }); }).catch((error) => { LogUtil.e('AuthManagerImpl', `catch error, ${error.code}, ${error.message}`, ''); const k29 = { status: false, info: `catch error, ${error.code}, ${error.message}`, infocode: '-1' }; return k29; }); } q26(response, s28, request, context) { const header = response.header; if (header === undefined) { return undefined; } const t28 = Object.getOwnPropertyNames(header); if (t28.length === 0) { return; } let u28 = new HashMap(); const info = s28.info; const v28 = s28.infocode; u28.set('info', Utils.s11(info)); u28.set('infocode', Utils.s11(v28)); let w28 = ''; const x28 = Utils.r11(request.header); if (x28 !== undefined) { let z28 = x28.get(Constants.r26); u28.set(Constants.r26, Utils.s11(z28)); let a29 = r10.k11(request); if (a29 !== undefined) { u28.set('sdkName', Utils.s11(a29)); } } t28.forEach((key) => { const value = header[key]; if (value !== undefined && typeof value === 'string') { u28.set(key, Utils.s11(value)); } }); cloudManager.s26(u28, context); return u28; } q19(response, j28) { let k28 = { status: false, info: '', infocode: '-1' }; if (response.result instanceof ArrayBuffer) { let o28 = cloudManager.t26(new Uint8Array(response.result)); return o28.then(q28 => { if (q28 !== undefined && q28 instanceof Uint8Array) { let r28 = Utils.uint8ArrayToString(q28); let jsonObject = JSON.parse(r28); this.u26(k28, jsonObject); cloudManager.v26(k28, jsonObject.result, j28); } else { k28.status = false; k28.info = (typeof q28 === 'string') ? q28 : '云控数据解析异常'; } return k28; }); } else { if (typeof response.result === 'string') { let jsonObject = JSON.parse(response.result); this.u26(k28, jsonObject); } else { k28.status = false; k28.info = JSON.stringify(response.result); } return new Promise((m28, n28) => { m28(k28); }); } } u26(h28, jsonObject) { if (typeof jsonObject.status === 'string') { const status = jsonObject.status; const i28 = Number.parseInt(status); h28.status = i28 <= 0 ? false : true; } else { h28.status = jsonObject.status; } h28.info = jsonObject.info; h28.infocode = jsonObject.infocode; } async l26(info, x27, result, y27, context) { let z27 = ''; if (x27 !== undefined) { let a28 = AppInfo.getPackageName(context); let b28 = undefined; let timeStamp = await d27.w26(); if (info === Constants.f26) { b28 = this.e26.get(Constants.f26); } else if (info === Constants.g26) { let e28 = undefined; if (result !== undefined && (typeof result === 'string')) { try { const g28 = JSON.parse(result); e28 = g28[Constants.x26]; } catch (error) { LogUtil.e(Constants.z9, 'showKeyAuthorizationInfo', '解析 scode 失败'); } } let f28 = await MD5.j15(a28); if (e28 === f28) { b28 = this.e26.get(Constants.h26); } else { b28 = this.e26.get(Constants.g26); } } if (b28 === undefined) { b28 = `请在高德开放平台官网中搜索【${info}】相关内容进行解决。`; } let c28 = x27.get(Constants.r26); let d28 = x27.get(Constants.y26); z27 = `Key验证失败 \n>>>>>>>>>` + `\n\tAppId:${a28}` + `\n\tkey:${this.m10}` + `\n\tSDK:${y27.r21()}` + `\n\tcsid:${c28}` + `\n\tgsid:${d28}` + `\n\tinfo:${info}` + `\n\ttime:${timeStamp}` + `\n\n\t${b28}\n\t多谢合作。\n<<<<<<<<<`; } else { z27 = '错误信息: ' + info; } } k26() { if (this.m10 && this.m10.length > 0) { return Promise.resolve(); } else { return new Promise((v27) => { setTimeout(() => { v27(); }, 1000); }); } } p26(q27, r27) { var s27; let userAgent = (s27 = q27.s21()) !== null && s27 !== void 0 ? s27 : ''; let t27 = {}; t27[Constants.z26] = 'application/x-www-form-urlencoded'; t27[Constants.r26] = e27(); t27[Constants.a27] = 'gzip, deflate'; t27[Constants.b27] = userAgent; return t27; } o26(k27, l27) { if (l27 === undefined || l27.length === 0) { return undefined; } let m27 = r10.c27(k27); const n27 = '&authkey=' + l27.join(';'); m27 = m27 + n27; let o27 = new util.TextEncoder("utf-8"); let p27 = o27.encodeInto(m27); return p27; } } export const authManager = new AuthManagerImpl(); 