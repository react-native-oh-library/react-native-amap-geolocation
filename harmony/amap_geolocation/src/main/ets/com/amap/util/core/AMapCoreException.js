import HashMap from '@ohos.util.HashMap'; export class AMapCoreException extends Error { constructor(errorMessage, s, t) { super(errorMessage); this.r5 = AMapCoreException.ERROR_UNKNOWN; this.s5 = ""; this.t5 = ""; this.u5 = AMapCoreException.v5; this.w5 = AMapCoreException.NETWORK_TYPE_UNKNOWN; this.x5 = -1; this.y5 = -1; this.z5 = false; this.statusMessage = ''; this.a6 = new HashMap(); if (s) { this.s5 = s; } if (t) { this.t5 = t; } } b6() { return this.r5; } c6() { return this.u5; } d6() { return this.w5; } e6() { return this.s5; } f6() { return this.t5; } g6(errorCode) { this.x5 = errorCode; } getErrorCode() { return this.x5; } h6() { return this.y5; } i6(errorCode) { return this.y5 = errorCode; } get j6() { return this.z5; } set j6(flag) { this.z5 = flag; } k6(errorMessage) { if (AMapCoreException.l6 == errorMessage) { this.x5 = AMapCoreException.m6; this.u5 = AMapCoreException.n6; this.w5 = AMapCoreException.o6; } else if (AMapCoreException.p6 == errorMessage) { this.x5 = AMapCoreException.q6; } else if (AMapCoreException.r6 == errorMessage) { this.x5 = AMapCoreException.s6; this.u5 = AMapCoreException.t6; this.w5 = AMapCoreException.u6; } else if (AMapCoreException.v6 == errorMessage) { this.x5 = AMapCoreException.w6; this.u5 = AMapCoreException.x6; this.w5 = AMapCoreException.y6; } else if (AMapCoreException.z6 == errorMessage) { this.x5 = AMapCoreException.a7; this.u5 = AMapCoreException.b7; this.w5 = AMapCoreException.c7; } else if (AMapCoreException.d7 == errorMessage) { this.x5 = AMapCoreException.e7; this.u5 = AMapCoreException.f7; this.w5 = AMapCoreException.g7; } else if (AMapCoreException.h7 == errorMessage) { this.x5 = AMapCoreException.i7; this.u5 = AMapCoreException.j7; this.w5 = AMapCoreException.k7; } else if (AMapCoreException.l7 == errorMessage) { this.x5 = AMapCoreException.m7; this.u5 = AMapCoreException.n7; this.w5 = AMapCoreException.o7; } else if (AMapCoreException.p7 == errorMessage) { this.x5 = AMapCoreException.q7; this.u5 = AMapCoreException.r7; this.w5 = AMapCoreException.s7; } else if (AMapCoreException.t7 == errorMessage) { this.x5 = AMapCoreException.u7; this.u5 = AMapCoreException.v7; this.w5 = AMapCoreException.w7; } else if (AMapCoreException.x7 == errorMessage) { this.x5 = AMapCoreException.u7; this.u5 = AMapCoreException.y7; this.w5 = AMapCoreException.w7; } else if (AMapCoreException.ERROR_UNKNOWN == errorMessage) { this.x5 = AMapCoreException.z7; } else if (AMapCoreException.a8 == errorMessage) { this.x5 = AMapCoreException.b8; } else if (AMapCoreException.c8 == errorMessage) { this.x5 = AMapCoreException.d8; } else if (AMapCoreException.e8 == errorMessage) { this.x5 = AMapCoreException.f8; } else if (AMapCoreException.g8 == errorMessage) { this.x5 = AMapCoreException.h8; } else if (AMapCoreException.i8 == errorMessage) { this.x5 = AMapCoreException.j8; } else if (AMapCoreException.k8 == errorMessage) { this.x5 = AMapCoreException.l8; } else if (AMapCoreException.m8 == errorMessage) { this.x5 = AMapCoreException.n8; } else if (AMapCoreException.o8 == errorMessage) { this.x5 = AMapCoreException.p8; } else if (AMapCoreException.q8 == errorMessage) { this.x5 = AMapCoreException.r8; } else if (AMapCoreException.s8 == errorMessage) { this.x5 = AMapCoreException.t8; } else if (AMapCoreException.u8 == errorMessage) { this.x5 = AMapCoreException.v8; } else { this.x5 = AMapCoreException.w8; } } x8(errorMessage) { if (AMapCoreException.l6 == errorMessage) { this.y5 = AMapCoreException.y8; } else if (AMapCoreException.p6 == errorMessage) { this.y5 = AMapCoreException.z8; } else if (AMapCoreException.r6 == errorMessage) { this.y5 = AMapCoreException.a9; } else if (AMapCoreException.h7 == errorMessage) { this.y5 = AMapCoreException.b9; } else if (AMapCoreException.t7 == errorMessage) { this.y5 = AMapCoreException.z8; } else if (AMapCoreException.ERROR_UNKNOWN == errorMessage) { this.y5 = AMapCoreException.b9; } else if (AMapCoreException.u8 == errorMessage) { this.y5 = AMapCoreException.v8; } else { this.y5 = AMapCoreException.b9; } } c9() { return this.statusMessage; } d9(o) { this.statusMessage = o; } e9() { return this.a6; } f9(m) { this.a6 = m; } } AMapCoreException.r7 = "1801"; AMapCoreException.t6 = "1802"; AMapCoreException.f7 = "1803"; AMapCoreException.j7 = "1804"; AMapCoreException.n7 = "1805"; AMapCoreException.v7 = "1806"; AMapCoreException.g9 = "1807"; AMapCoreException.v5 = "1900"; AMapCoreException.x6 = "1901"; AMapCoreException.n6 = "1902"; AMapCoreException.b7 = "1903"; AMapCoreException.y7 = "2001"; AMapCoreException.s7 = "ProtocolException"; AMapCoreException.u6 = "SocketTimeoutException"; AMapCoreException.g7 = "MalformedURLException"; AMapCoreException.k7 = "UnknownHostException"; AMapCoreException.o7 = "CannotConnectToHostException"; AMapCoreException.w7 = "ConnectionException"; AMapCoreException.h9 = "ConnectionCancelledException"; AMapCoreException.NETWORK_TYPE_UNKNOWN = "UnknownError"; AMapCoreException.y6 = "IllegalArgumentException"; AMapCoreException.o6 = "IOException"; AMapCoreException.c7 = "NullPonumberException"; AMapCoreException.c8 = "requeust is null"; AMapCoreException.g8 = "response is null"; AMapCoreException.e8 = "request url is empty"; AMapCoreException.i8 = "thread pool has exception"; AMapCoreException.k8 = "sdk name is invalid"; AMapCoreException.m8 = "sdk info is null"; AMapCoreException.o8 = "sdk packages is null"; AMapCoreException.l6 = "IO 操作异常 - IOException"; AMapCoreException.p6 = "socket 连接异常 - SocketException"; AMapCoreException.r6 = "socket 连接超时 - SocketTimeoutException"; AMapCoreException.v6 = "无效的参数 - IllegalArgumentException"; AMapCoreException.z6 = "空指针异常 - NullPonumberException"; AMapCoreException.d7 = "url异常 - MalformedURLException"; AMapCoreException.h7 = "未知主机 - UnKnowHostException"; AMapCoreException.l7 = "服务器连接失败 - UnknownServiceException"; AMapCoreException.p7 = "协议解析错误 - ProtocolException"; AMapCoreException.t7 = "http连接失败 - ConnectionException"; AMapCoreException.i9 = "http连接超时 - ConnectTimeoutException"; AMapCoreException.ERROR_UNKNOWN = "未知的错误"; AMapCoreException.a8 = "key鉴权失败"; AMapCoreException.q8 = "线程池为空"; AMapCoreException.s8 = "获取对象错误"; AMapCoreException.j9 = "http读取header失败"; AMapCoreException.u8 = "DNS解析失败"; AMapCoreException.x7 = "服务QPS超限"; AMapCoreException.d8 = 1; AMapCoreException.f8 = 2; AMapCoreException.h8 = 3; AMapCoreException.j8 = 4; AMapCoreException.l8 = 5; AMapCoreException.n8 = 6; AMapCoreException.p8 = 7; AMapCoreException.r8 = 8; AMapCoreException.m6 = 21; AMapCoreException.q6 = 22; AMapCoreException.s6 = 23; AMapCoreException.w6 = 24; AMapCoreException.a7 = 25; AMapCoreException.e7 = 26; AMapCoreException.i7 = 27; AMapCoreException.m7 = 28; AMapCoreException.q7 = 29; AMapCoreException.u7 = 30; AMapCoreException.z7 = 31; AMapCoreException.b8 = 32; AMapCoreException.t8 = 101; AMapCoreException.w8 = -1; AMapCoreException.k9 = 1; AMapCoreException.a9 = 2; AMapCoreException.l9 = 2101; AMapCoreException.m9 = 2102; AMapCoreException.v8 = 3; AMapCoreException.n9 = 4; AMapCoreException.o9 = 4101; AMapCoreException.p9 = 4102; AMapCoreException.q9 = 4103; AMapCoreException.r9 = 4104; AMapCoreException.s9 = 5; AMapCoreException.z8 = 6; AMapCoreException.t9 = 6101; AMapCoreException.u9 = 6102; AMapCoreException.y8 = 7; AMapCoreException.v9 = 7101; AMapCoreException.w9 = 8; AMapCoreException.b9 = 9; AMapCoreException.x9 = 10; 