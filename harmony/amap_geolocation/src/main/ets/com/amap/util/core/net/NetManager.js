import http from '@ohos.net.http'; import { s10 } from '../dataProcess/ChangeURLNetDataProcess'; import { c12 } from '../dataProcess/CloudControlNetDataProcess'; import { r12 } from '../dataProcess/PandoraNetDataProcess'; import { v19 } from '../respDataProcess/CloudControlRespNetDataProcess'; import { Constants } from '../utils/Constants'; import { LogUtil } from '../utils/LogUtil'; import { Utils } from '../utils/Utils'; const a10 = 'NetManager'; export class NetManager { constructor() { this.j19 = new s10(); this.k19 = new c12(); this.l19 = new r12(); this.m19 = new v19(); } static getInstance() { if (!NetManager.instance) { NetManager.instance = new NetManager(); } return NetManager.instance; } makeRequestGet(request, context) { return this.n19(http.RequestMethod.GET, request, context); } makeRequestPost(request, context) { return this.n19(http.RequestMethod.POST, request, context); } p19(request, context) { return this.n19(http.RequestMethod.POST, request, context); } async n19(method, request, context) { if (this.j19) { request = await this.j19.j10(request); } if (this.l19) { request = await this.l19.j10(request); } if (this.k19) { request = this.k19.h11(request); } let z19 = http.createHttp(); let a20 = z19.request(request.url, { method: method, extraData: request.extraData, expectDataType: request.expectDataType, usingCache: request.usingCache, priority: request.priority, header: request.header, readTimeout: request.readTimeout, connectTimeout: request.connectTimeout, usingProtocol: request.usingProtocol, usingProxy: request.usingProxy, caPath: request.caPath }); return a20.then((value) => { let f20 = { responseCode: value.responseCode, header: value.header, resultType: value.resultType, cookies: value.cookies, result: value.result, performanceTiming: value.performanceTiming }; if (request.needParseData === true && value.responseCode === http.ResponseCode.OK) { f20.commonResponseResult = this.q19(f20); } if (this.m19) { f20 = this.m19.h11(f20, request, context); } LogUtil.d(Constants.z9, a10, "Response :" + JSON.stringify(f20)); return f20; }).catch(() => { let d20 = { dnsTiming: 0, tcpTiming: 0, tlsTiming: 0, firstSendTiming: 0, firstReceiveTiming: 0, totalFinishTiming: 0, redirectTiming: 0, responseHeaderTiming: 0, responseBodyTiming: 0, totalTiming: 0 }; let e20 = { message: 'error', result: '', resultType: http.HttpDataType.STRING, responseCode: 0, cookies: '', header: Object, performanceTiming: d20 }; LogUtil.e(Constants.z9, a10, "Response :" + JSON.stringify(e20)); return e20; }); } q19(response) { if (response.result === undefined) { return undefined; } let w19 = { status: '-1', info: '', infocode: '-1' }; try { if (response.result instanceof ArrayBuffer) { let x19 = new Uint8Array(response.result); let y19 = Utils.uint8ArrayToString(x19); w19 = JSON.parse(y19); } else { if (typeof response.result === 'string') { w19 = JSON.parse(response.result); } } } catch (error) { } return w19; } } NetManager.instance = undefined; 