import HashMap from '@ohos.util.HashMap'; import r10 from '../utils/RequestUtil'; import { authManager } from '../utils/auth/AuthManagerImpl'; export class s10 { j10(request) { this.isREST = request.isREST; this.k10(request); if (request.params !== undefined && request.params.length > 0) { return this.l10(request.url, request.params).then(url => { request.url = url; return new Promise((b12) => { b12(request); }); }); } else { return new Promise((y11) => { y11(request); }); } } k10(request) { if (request.isREST && authManager.m10) { if (request.params === undefined) { request.params = new HashMap(); } request.params.set('key', authManager.m10); } } l10(e11, getParams) { if (e11 === "") { return new Promise((w11) => { w11(e11); }); } if (s10.n10 !== undefined) { if (getParams != undefined) { for (let u11 of s10.n10) { let key = u11[0]; let value = u11[1]; getParams.set(key, value); } } else { getParams = s10.n10; } } if (getParams == undefined || getParams.length <= 0) { return new Promise((t11) => { t11(e11); }); } let f11 = this.o10(getParams); return f11.then(() => { if (getParams == undefined || getParams.length <= 0) { return new Promise((r11) => { r11(e11); }); } let params = null; const index = e11.indexOf("?"); if (index >= 0) { params = new HashMap(); const m11 = e11.substring(index); for (let n11 of getParams) { let key = n11[0]; let value = n11[1]; const o11 = encodeURIComponent(key); const p11 = m11.match(new RegExp(".*[\\?\\&]" + o11 + "=.*")); if (p11 === null) { params.set(key, value); } } } else { params = getParams; } if (params.length === 0) { return new Promise((l11) => { l11(e11); }); } const param = this.p10(params); const h11 = []; h11.push(e11); if (index >= 0) { if (!e11.endsWith("?") && !e11.endsWith("&")) { h11.push("&"); } } else { h11.push("?"); } if (param !== null) { h11.push(param); } return new Promise((j11) => { j11(h11.join("")); }); }); } o10(getParams) { if (this.isREST) { let y10 = r10.q10(getParams, getContext(this)); return y10.then((a11) => { for (let d11 of a11) { let key = d11[0]; let value = d11[1]; getParams.set(key, value); } return new Promise((c11) => { c11(); }); }); } else { return new Promise((x10) => { x10(); }); } } p10(t10) { if (t10 != undefined) { const u10 = []; for (let v10 of t10) { let key = v10[0]; let value = v10[1]; if (value == null) { value = ""; } if (u10.length > 0) { u10.push("&"); } u10.push(encodeURIComponent(key)); u10.push("="); u10.push(encodeURIComponent(value)); } return u10.join(""); } return ""; } } s10.n10 = undefined; 