import { r22 } from '../AMapAES'; import { o17 } from '../AMapRSA'; import { LogUtil } from '../LogUtil'; import { Constants } from '../Constants'; import util from '@ohos.util'; import { Base64Util } from '../Base64Util'; const a10 = 'Auth'; export class q12 { constructor() { this.version = 1; this.l24 = 0; this.n24 = 0; this.o24 = 0; this.version = 1; this.p24 = new Uint8Array(); this.q24 = new Uint8Array(); this.r24 = new Uint8Array(); this.encryptedData = new Uint8Array(); this.s24 = new Uint8Array(); this.t24(); } t24() { let f26 = new util.TextEncoder(); this.p24 = f26.encodeInto(q12.u24); let version = 1; const g26 = new Uint8Array(1); const h26 = new DataView(g26.buffer); h26.setUint8(0, version); this.p24 = this.z16(g26, this.p24); } h12(d26) { d26.forEach((element) => { this.l24++; this.q24 = this.v24(element, this.q24, 2, true); }); } v24(y25, z25, length, a26) { let num = y25.byteLength; if (a26) { num = this.w24(num); } const b26 = this.x24(num, length); let c26 = new Uint8Array(z25.byteLength + b26.byteLength + y25.byteLength); c26.set(z25); c26.set(b26, z25.byteLength); c26.set(y25, z25.byteLength + b26.byteLength); return c26; } i12(data) { return this.y24(data); } y24(data) { if (data.byteLength == 0) { return Promise.reject(); } this.o24++; let h25 = new r22(); let i25; let j25; let k25; let l25; let m25 = h25.i22(); return m25.then(() => { return h25.k22(); }).then(() => { if (h25.j22 === undefined) { const x25 = `encryptForSourceData amapAES.aesSymKey === undefined`; throw new Error(x25); } j25 = h25.j22.getEncoded(); k25 = j25.data; let w25 = Base64Util.z24(Constants.a25); i25 = new o17(w25); return i25.b23(); }).then(() => { return i25.j17(k25); }).then(v25 => { l25 = v25.data; return h25.encrypt(data); }).then(t25 => { let u25 = this.z16(t25.data, l25); this.encryptedData = this.b25(u25, 2, true); return Promise.resolve(); }).catch((error) => { LogUtil.e(a10, '', `catch error, ${error.code}, ${error.message}`); return Promise.reject(); }); } b25(data, length, e25) { let num = data.byteLength; if (e25) { num = this.w24(num); } const f25 = this.x24(num, length); const g25 = this.z16(data, f25); return g25; } x24(num, length) { const c25 = new Uint8Array(length); const d25 = new DataView(c25.buffer); d25.setUint16(0, num, false); return c25; } z16(a25, data) { const b25 = new Uint8Array(a25.byteLength + data.byteLength); b25.set(data); b25.set(a25, data.byteLength); return b25; } c25(num, length, data) { const y24 = new Uint8Array(length); const z24 = new DataView(y24.buffer); z24.setUint8(0, num); return this.z16(y24, data); } j12() { let x24 = new Uint8Array(); x24 = this.z16(this.p24, x24); let len = this.s24.byteLength; x24 = this.c25(len, 1, x24); if (len > 0) { x24 = this.z16(this.s24, x24); } x24 = this.c25(this.l24, 1, x24); x24 = this.z16(this.q24, x24); x24 = this.c25(this.n24, 1, x24); if (this.n24 > 0) { x24 = this.z16(this.r24, x24); } x24 = this.c25(this.o24, 1, x24); x24 = this.z16(this.encryptedData, x24); return x24; } w24(value) { return value; const u24 = new Uint8Array(new Uint16Array([1]).buffer)[0] === 1; if (u24) { const v24 = (value & 0xff00) >> 8; const w24 = (value & 0x00ff) << 8; return v24 | w24; } return value; } } q12.u24 = "PANDORA$"; 