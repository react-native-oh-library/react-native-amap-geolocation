import HashMap from '@ohos.util.HashMap'; import { cloudManager } from '../utils/auth/CloudManager'; import { Utils } from '../utils/Utils'; import { Constants } from '../utils/Constants'; import { authManager } from '../utils/auth/AuthManagerImpl'; import { LogUtil } from '../utils/LogUtil'; import r10 from '../utils/RequestUtil'; import { g20 } from '../utils/SDKInfoUtil'; export class v19 { h11(response, request, context) { this.w19(response, request, context); return response; } w19(response, request, context) { if (response === undefined || response.header === undefined) { return; } const h20 = r10.k11(request); if (h20 === undefined || h20.length === 0) { return; } const i20 = response.header; const j20 = Object.getOwnPropertyNames(i20); if (j20.length === 0) { return; } const k20 = new HashMap(); j20.forEach((key) => { const value = i20[key]; if (value !== undefined && typeof value === 'string') { k20.set(key, Utils.s11(value)); } }); const l20 = Utils.r11(request.header); if (l20 === undefined) { return; } const m20 = k20.get('sc'); if (m20 === undefined) { return; } let n20 = undefined; if (l20.hasKey(Constants.n11)) { if (!m20.includes('#1')) { return; } } else { return; } const o20 = cloudManager.l11(h20); if (o20 === undefined || o20.length === 0) { return; } const p20 = o20.get(Constants.n11); if (n20 !== undefined && p20 !== undefined && n20 === p20) { return; } const q20 = cloudManager.x19(h20); if (q20 === undefined) { return; } const r20 = g20.y19(h20); if (r20 === undefined) { return; } let s20 = authManager.requestAuthWithComponent(r20, q20, undefined, context, true); s20.then(v20 => { if (v20.status && v20.result && v20.result.length > 0) { const listener = cloudManager.z19(h20); if (listener !== undefined) { listener.onCloudChanged(v20); } else { LogUtil.e(Constants.z9, 'Auth', `找不到 ${h20} 对应的CloudListener，请检查是否注册或删除`); } } }); } } 